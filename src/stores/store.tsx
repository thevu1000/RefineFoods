import { create } from 'zustand';

// Interface cho Category
interface Category {
  id: number;
  title: string;
  isActive: boolean;
}

// Interface cho Product
interface Product {
  images: any;
  id: number;
  title: string;
  price: number;
  categoryId: number;
  quantity: number; // Th√™m thu·ªôc t√≠nh quantity ƒë·ªÉ theo d√µi s·ªë l∆∞·ª£ng
}

// Interface Zustand Store
interface StoreState {
  categories: Category[];
  activeCategoryId: number;
  cart: Product[]; // Th√™m thu·ªôc t√≠nh cart
  addToCart: (product: Product) => void; // Th√™m h√†m addToCart
  removeFromCart: (productId: number) => void; // Th√™m h√†m removeFromCart
}

// T·∫°o Zustand store
const useStore = create<StoreState>((set, get) => ({
  categories: [
    { id: 1, title: 'üçü Starters', isActive: true },
    { id: 2, title: 'üçù Pastas', isActive: false },
    { id: 3, title: 'üçï Pizzas', isActive: false },
    { id: 4, title: 'üçî Burgers', isActive: false },
    { id: 5, title: 'üç© Deserts', isActive: false },
    { id: 6, title: 'ü•ó Salads', isActive: false },
    { id: 7, title: 'üçñ Grilled Meat', isActive: false },
    { id: 8, title: 'üçó Chicken', isActive: false },
    { id: 9, title: 'ü•§ Cold Drinks', isActive: false },
    { id: 10, title: '‚òï Hot Drinks', isActive: false },
  ],
  activeCategoryId: 1, // M·∫∑c ƒë·ªãnh category ƒë·∫ßu ti√™n active
  cart: [], // Kh·ªüi t·∫°o gi·ªè h√†ng r·ªóng

  // H√†m th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  addToCart: (product: Product) => {
    set((state) => {
      const existingProduct = state.cart.find(item => item.id === product.id);
      if (existingProduct) {
        // N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, tƒÉng s·ªë l∆∞·ª£ng
        return {
          cart: state.cart.map(item =>
            item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
          ),
        };
      } else {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i, th√™m m·ªõi v·ªõi s·ªë l∆∞·ª£ng = 1
        return { cart: [...state.cart, { ...product, quantity: 1 }] };
      }
    });
  },

  // H√†m x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  removeFromCart: (productId: number) => {
    set((state) => {
      const existingProduct = state.cart.find(item => item.id === productId);
      if (existingProduct) {
        // N·∫øu s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng l·ªõn h∆°n 1, ch·ªâ c·∫ßn gi·∫£m s·ªë l∆∞·ª£ng
        if (existingProduct.quantity > 1) {
          return {
            cart: state.cart.map(item =>
              item.id === productId ? { ...item, quantity: item.quantity - 1 } : item
            ),
          };
        } else {
          // N·∫øu s·ªë l∆∞·ª£ng = 1, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
          return { cart: state.cart.filter(item => item.id !== productId) };
        }
      }
      return state; // N·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i, kh√¥ng l√†m g√¨
    });
  },
}));

export default useStore;
